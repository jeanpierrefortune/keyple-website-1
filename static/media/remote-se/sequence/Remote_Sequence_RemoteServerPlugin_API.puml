@startuml
title
    Keyple Remote Plugin
    RemoteServerPlugin API (16/06/2020)
    (with an ObservableReader)
end title

' == THEME ==

skinparam Shadowing false
skinparam RoundCorner 10

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_LIGHT_YELLOW FEF9E7
!define C_LIGHT_ORANGE FDF2E9

' == CONTENT ==

participant "Card" as se

box "Client APP using Native Lib" #C_LIGHT_YELLOW
participant "**ObservableReader**" as reader #LightBlue
participant "**Plugin**" as plugin #LightBlue
actor "**Ticketing Service**" as client
participant "**NativeClientService**" as nativeService #LightBlue
end box

box "Server APP using Virtual Lib" #C_LIGHT_ORANGE
participant "**RemoteServerPlugin**" as remotePlugin #LightBlue
participant "**RemoteServerObservableReader**" as virtualReader #LightBlue
actor "**Remote Ticketing Service**:\n**<back:LightBlue>ObservablePlugin.PluginObserver**" as server
end box

== Virtual Lib Initialization ==

activate server #Pink
server -> remotePlugin ** : seProxyService.registerPlugin\n (RemoteServerPluginFactory...\n    .withPluginObserver (this)...)
server -> server : Awaiting receipt of\n a Plugin Event...

== Native Lib Initialization ==

activate client #Pink
client -> nativeService ** : NativeClientServiceFactory...
client -> plugin ** : seProxyService.registerPlugin\n (new XXXFactory())
activate plugin #LightBlue
plugin -> reader ** : create
return

== Native SeSelection ==

client -> client : Start Ticketing Service
client -> plugin : getReader (name)
activate plugin #LightBlue
return reader
client -> client : prepareSeSelection (reader)
client -> reader : setSeSelectionRequest
activate reader #LightBlue

activate se #LightYellow
se ->> reader : SE_MATCHED Event
reader -> se : C-APDU
se --> reader : R-APDU
return <color:red>**matchingSe**</color>

== Execute Remote Service for a specific Observable Native Reader ==

client -> client : prepareUserInputData ()

client -> client : NativeClientUtils.getService ()
client -> nativeService : executeRemoteService (\n RemoteServiceParameters\n   .builder(<color:blue>**serviceId**</color>, reader)\n   .withInitialSeContent(<color:red>**matchingSe**</color>)\n   .withUserInputData(<color:green>**userInputData**</color>).build(),\n UserOutputDataFactory)
activate nativeService #LightBlue

nativeService -> remotePlugin
activate remotePlugin #LightBlue
remotePlugin -> virtualReader ** : create
remotePlugin ->> server : notify (READER_CONNECTED, virtualReaderName)
deactivate remotePlugin

server -> remotePlugin : getReader (virtualReaderName)
activate remotePlugin #LightBlue
return virtualReader
server -> virtualReader : getServiceId ()
activate virtualReader #LightBlue
return <color:blue>**serviceId**</color>
server -> server : Find ticketing service\nto start using <color:blue>**serviceId**</color>

== Remote Ticketing Service ==

server -> server : Start Ticketing Service
server -> virtualReader : getInitialSeContent ()
activate virtualReader #LightBlue
return <color:red>**matchingSe**</color>
server -> virtualReader : getUserInputData\n (UserInputDataFactory)
activate virtualReader #LightBlue
return <color:green>**userInputData**</color>
server -> virtualReader : addObserver (this)
activate virtualReader #LightBlue
return
server -> server : continue...

loop #C_LIGHT_ORANGE SE exchanges
    server -> server : prepareSeRequest\n (virtualReader)
    server -> virtualReader : processSeRequest ()
    activate virtualReader #LightBlue
    virtualReader -> se : C-APDU
    se --> virtualReader : R-APDU
    return response
end loop

server -> server : prepareUserOutputData ()
server -> remotePlugin : terminateService (virtualReaderName, <color:purple>**userOutputData**</color>)
activate remotePlugin #LightBlue
remotePlugin -x virtualReader : remove virtual reader if needed

remotePlugin --> nativeService
deactivate remotePlugin
nativeService --> client : <color:purple>**userOutputData**</color>
deactivate nativeService

@enduml